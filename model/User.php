<?php
require_once "framework/Model.php";
require_once "model/Experience.php";
require_once 'model/Mastering.php';
require_once 'model/Skill.php';

class User extends Model
{

    private ?int $user_id;
    private string $mail;
    private string $fullName;
    private string $title;
    private string $password;
    private ?DateTime $registeredAt;
    private DateTime $birthdate;
    private string $role;

    protected const ROLE_ADMIN = 'admin';
    protected const ROLE_USER = 'user';

    protected const ROLES = [
        self::ROLE_ADMIN,
        self::ROLE_USER
    ];


    /**
     * @param int|null $user_id it's assigned to null in the constructor because it'll be autogenerated in the database
     * @param string $mail
     * @param string $fullName
     * @param string $title
     * @param string $password
     * @param DateTime|null $registeredAt it's assigned to null in the constructor because the function update() will assign the time at the insertion
     * @param DateTime $birthdate
     * @param string $role
     */



    public function __construct(string $mail, string $fullName, string $title, string $password, DateTime $birthdate, DateTime $registeredAt = NULL, string $role = self::ROLE_USER, int $user_id = NULL)
    {
        $this->user_id = $user_id;
        $this->mail = $mail;
        $this->fullName = $fullName;
        $this->title = $title;
        $this->password = $password;
        $this->registeredAt = $registeredAt;
        $this->birthdate = $birthdate;
        $this->role = $role;
    }


    private static function validate_password($password)
    {
        $errors = [];
        if (strlen($password) < 8 || strlen($password) > 16) {
            $errors[] = "Password length must be between 8 and 16.";
        }
        if (!((preg_match("/[A-Z]/", $password)) && preg_match("/\d/", $password) && preg_match("/['\";:,.\/?!\\-]/", $password))) {
            $errors[] = "Password must contain one uppercase letter, one number and one punctuation mark.";
        }
        return $errors;
    }

    public static function validate_passwords($password, $password_confirm)
    {
        $errors = User::validate_password($password);
        if ($password != $password_confirm) {
            $errors[] = "You have to enter twice the same password.";
        }
        return $errors;
    }
    public static function validate_unicity($email): array
    {
        $errors = [];
        $user = self::get_user_by_mail($email);
        if ($user) {
            $errors[] = "This email is already used.";
        }
        return $errors;
    }

    public static function validateRole(string $role): bool
    {
        return in_array($role, self::ROLES);
    }
    //indique si un mot de passe correspond à son hash
    public static function check_password(string $clear_password, string $hash): bool
    {
        return $hash === Tools::my_hash($clear_password);
    }

    //renvoie un tableau d'erreur(s) 
    //le tableau est vide s'il n'y a pas d'erreur.
    //ne s'occupe que de la validation "métier" des champs obligatoires (le pseudo)
    //les autres champs (mot de passe, description et image) sont gérés par d'autres
    //méthodes.

    //doesn't work with email :
    //&& is_string($this->email)

    //filter_var($email, FILTER_VALIDATE_EMAIL) --> source W3SCHOOL
    public function validate(): array
    {
        $errors = [];
        if (isset($this->mail) && self::validateEmail($this->mail)) {
            $user = self::get_user_by_mail($this->mail);
            if (!is_null($user) && $this->getUserId() !== $user->getUserId()){
                $errors[] = "This email is already used.";
            }

        }

        if (!(isset($this->fullName) && strlen($this->fullName) > 3 && strlen($this->fullName) < 128)) {
            $errors[] = "fullName must be between 3 and 128.";
        }
        if (!(isset($this->title) && strlen($this->title) > 3 && strlen($this->title) < 256)) {
            $errors[] = "Title must be between 3 and 256.";
        }

        if (isset($this->birthdate)) {
            $errors = array_merge($errors, self::validateBirthdate($this->birthdate));
        } else {
            $errors[] = "Birthdate can not be empty.";
        }
        return $errors;
    }

    public static function validateBirthdate($birthdate): array
    {
        $errors = array();
        if ($birthdate instanceof DateTime) {
            $birthdate = date_format($birthdate, "Y-m-d");
        }
        $bDate = new DateTime($birthdate . " 00:00:00");
        $diff = $bDate->diff(new DateTime('now'));
        if ($diff->y < 18) {
            $errors[] = "User must have at least 18 years old.";
        }
        return $errors;
    }


    public static function validateEmail($email): bool
    {
        if (filter_var($email, FILTER_VALIDATE_EMAIL)) {
            return true;
        }
        return false;
    }

    public static function validateFullName(string $fullName): bool
    {
        if (!(strlen($fullName) > 3 && strlen($fullName) < 129)) {
            return false;
        }
        return true;
    }

    public static function validateTitle(string $title): bool
    {
        if (!(strlen($title) < 257 && strlen($title)  > 3)) {
            return false;
        }
        return true;
    }

    public static function validate_login($mail, $password): array
    {
        $errors = [];
        $user = User::get_user_by_mail($mail);
        if ($user) {
            if (!self::check_password($password, $user->password)) {
                $errors[] = "Wrong password. Please try again.";
            }
        } else {
            $errors[] = "Can't find a user with the mail : '$mail'. Please sign up.";
        }
        return $errors;
    }

    public function thirdLevelValidation($table, $objectId){
        $request = "SELECT count(*) FROM ".$table." WHERE user=:user AND id=:objectId";
        $query = self::execute($request,array("user"=>$this->user_id, "objectId"=>$objectId));
        $data = $query->fetch();
        if ($data[0] == 1) {
            return $data;
        }else{
            return null;
        }
    }

    public function thirdLevelForUsing($experienceId,$skillId){
        $query = self::execute("SELECT count(*) from `using` where experience=:experienceId AND skill=:skillId", array("experienceId"=>$experienceId, "skillId"=>$skillId));
        $data = $query->fetch();
        if($data[0] == 1){
            return $data;
        }else{
            return null;
        }
    }

    public function update(): User
    {

        if (self::getUserByUserId($this->user_id) != null) {
            self::execute(
                "UPDATE user SET 
            Mail=:Mail,
            FullName=:FullName, 
            Title=:Title, 
            Password=:Password, 
            RegisteredAt=:RegisteredAt, 
            Birthdate=:Birthdate, 
            Role=:Role WHERE ID=:ID",
                array(
                    "ID"           => $this->user_id,
                    "Mail"         => $this->mail,
                    "FullName"     => $this->fullName,
                    "Title"        => $this->title,
                    "Password"     => $this->password,
                    "RegisteredAt" => date_format($this->registeredAt, "Y-m-d"),
                    "Birthdate" => date_format($this->birthdate, "Y-m-d"),
                    "Role" => $this->role
                )
            );
        } else {
            self::execute(
                "INSERT INTO user(
                 Mail,
                 FullName,
                 Title,
                 Password,
                 RegisteredAt,
                 Birthdate,
                 Role) 
            VALUES(:Mail,
                   :FullName,
                   :Title,
                   :Password,
                   :RegisteredAt,
                   :Birthdate,
                   :Role)",
                [
                    "Mail" => $this->mail,
                    "FullName" => $this->fullName,
                    "Title" => $this->title,
                    "Password" => $this->password,
                    "RegisteredAt" => $this->registeredAt->format("Y-m-d H:i:s"),
                    "Birthdate" => $this->birthdate->format("Y-m-d"),
                    "Role" => $this->role
                ]
            );
            $this->user_id = self::lastInsertId();
        }
        return $this;
    }

    //on fait appel à la méthode d'instance après avoire cherché l'objet
    public function delete(): bool
    {
        self::execute("DELETE FROM `using` WHERE Experience IN(SELECT ID FROM Experience where User = :userId)", ["userId" => $this->user_id]);
        self::execute("DELETE FROM experience WHERE User = :userId", ["userId" => $this->user_id]);
        self::execute("DELETE FROM mastering WHERE User = :userId", ["userId" => $this->user_id]);
        self::execute("DELETE FROM user WHERE ID = :userId", ["userId" => $this->user_id]);

        return true;
    }

    public function isAdmin(): bool
    {
        return $this->role === self::ROLE_ADMIN;
    }


    public function getExperienceAmount()
    {
        $query = self::execute("SELECT COUNT(*) FROM experience where user=:user", array("user" => $this->user_id));
        $data = $query->fetch();
        return $data[0];
    }

    public function getSkillAmount()
    {
        $query = self::execute("SELECT COUNT(*) FROM mastering where user=:user", array("user" => $this->user_id));
        $data = $query->fetch();
        return $data[0];
    }



    /**
     * @return mixed
     */
    public function getUserId()
    {
        return $this->user_id;
    }

    /**
     * @return string
     */
    public function getMail(): string
    {
        return $this->mail;
    }

    /**
     * @return string
     */
    public function getFullName(): string
    {
        return $this->fullName;
    }

    /**
     * @return string
     */
    public function getTitle(): string
    {
        return $this->title;
    }

    /**
     * @return string
     */
    public function getPassword(): string
    {
        return $this->password;
    }

    /**
     * @return DateTime
     */
    public function getRegisteredAt(): DateTime
    {
        return $this->registeredAt;
    }

    /**
     * @return DateTime
     */
    public function getBirthdate(): DateTime
    {
        return $this->birthdate;
    }

    /**
     * @return string
     */
    public function getRole(): string
    {
        return $this->role;
    }

    /**
     * Find a single user by its ID.
     * @param $id
     * @return User|null
     * @throws Exception
     */
    public static function getUserByUserId($id): ?User
    {
        $query = self::execute("SELECT * FROM `user` where ID = :ID", ["ID" => $id]);
        $data = $query->fetch();
        if ($query->rowCount() == 0) {
            return null;
        } else {
            return new User(
                $data["Mail"],
                $data["FullName"],
                $data["Title"],
                $data["Password"],
                new DateTime($data["Birthdate"]),
                new DateTime($data["RegisteredAt"]),
                $data["Role"],
                $data["ID"]
            );
        }
    }

    public static function get_Users()
    {
        $query = self::execute("SELECT * FROM User", array());
        $data = $query->fetchAll();
        $results = [];
        foreach ($data as $row) {
            $results[] = new User(
                $row["Mail"],
                $row["FullName"],
                $row["Title"],
                $row["Password"],
                new DateTime($row["Birthdate"]),
                new DateTime($row["RegisteredAt"]),
                $row["Role"],
                $row["ID"]
            );
        }
        return $results;
    }

    public function getUsersBySkillsId(array $selectedSkills): array
    {
        $selectedSkillsId = implode(',', $selectedSkills);

        if (empty($selectedSkills)) {
            $query = self::execute("SELECT * FROM User", []);
        } else {
            $query = self::execute("SELECT * FROM `user`
                                        WHERE user.ID IN (SELECT User FROM mastering
                                        WHERE skill IN ($selectedSkillsId))", []);
        }
        $data = $query->fetchAll();
        $results = [];
        foreach ($data as $row) {
            $results[] = new User(
                $row["Mail"],
                $row["FullName"],
                $row["Title"],
                $row["Password"],
                new DateTime($row["Birthdate"]),
                new DateTime($row["RegisteredAt"]),
                $row["Role"],
                $row["ID"]
            );
        }
        return $results;
    }


    public static function get_user_by_mail($mail): ?User
    {
        $query = self::execute("SELECT * FROM user where Mail = :mail", array('mail' => $mail));
        $row = $query->fetch();
        if ($query->rowCount() == 0) {
            return null;
        } else {
            return new User(
                $row["Mail"],
                $row["FullName"],
                $row["Title"],
                $row["Password"],
                new DateTime($row["Birthdate"]),
                new DateTime($row["RegisteredAt"]),
                $row["Role"],
                $row["ID"]
            );
        }
    }

    public function get_Experience() : array
    {
        $results = [];
        $query = self::execute(
            "SELECT * FROM experience where User =:User ORDER BY `Start`,`Stop`",
            array("User" => $this->user_id)
        );

        $data = $query->fetchAll();
        foreach ($data as $row) {
            $results[] = new Experience(
                $row["Start"],
                $row["Title"],
                $row["Description"],
                $row["User"],
                $row["Place"],
                $row["Stop"],
                $row["ID"]
            );
        }
        return $results;
    }

    public function getExperienceById($expId) : ?Experience
    {
        $query = self::execute(
            "SELECT * from experience where id=:id",
            array("id" => $expId)
        );
        $data = $query->fetch();
        return new Experience(
            $data["Start"],
            $data["Title"],
            $data["Description"],
            $data["User"],
            $data["Place"],
            $data["Stop"],
            $data["ID"]
        );

        return null;
    }

    public function getMasteredSkills(): array
    {
        $skills = [];
        $query = self::execute("SELECT * from mastering 
                                join user u on u.ID=mastering.User 
                                JOIN skill s on s.ID=mastering.Skill 
                                where u.ID=:user", ["user" => $this->user_id]);
        $data = $query->fetchAll();
        foreach ($data as $row) {
            $skills[] = new Mastering(
                $row['User'],
                $row['Skill'],
                $row['Level']
            );
        }

        return $skills;
    }
    public function get_users_by_skillId($skillId)
    {
        $query = self::execute("SELECT * FROM user u
        JOIN mastering m on m.User = u.ID
        JOIN skill s on m.Skill = s.ID
        WHERE s.ID =:ID", array("ID" => $skillId));
        $data = $query->fetchAll();
        if ($data) {
            foreach ($data as $row) {
                $users[] = new User(
                    $row['Mail'],
                    $row['FullName'],
                    $row['Title'],
                    $row['Password'],
                    new DateTime($row['Birthdate']),
                    new DateTime($row['RegisteredAt']),
                    $row['Role'],
                    $row['ID']
                );
            }
            return $users;
        }
    }


    public function getMasterSkill($name)
    {

        $query = self::execute("SELECT s.Name, mastering.Level from mastering 
                                join user u on u.ID=mastering.User 
                                JOIN skill s on s.ID=mastering.Skill 
                                where u.ID =:ID AND s.Name=:NAME", array("ID" => $this->user_id, "NAME" => $name));

        $data = $query->fetch();
    }

    public function getAllSkills()
    {
        $query = self::execute("SELECT * from skill", array());
        $data = $query->fetchAll();
        foreach ($data as $row) {
            $allskills[] = new Skill($row['Name'], $row['ID']);
        }
        return $allskills;
    }

    public function getUsersAsJSON(array $selectedSkills): string
    {
        $str = "";
        $users = $this->getUsersBySkillsId($selectedSkills);

        foreach ($users as $user) {
            $userId       = $user->user_id;
            $mail         = $user->mail;
            $fullName     = $user->fullName;
            $title        = $user->title;
            $birthdate    = $user->birthdate->format("Y-m-d");
            $role         = $user->role;
            $experienceAmount = $user->getExperienceAmount();
            $skillAmount = $user->getSkillAmount();

            $userId       = json_encode($userId);
            $mail         = json_encode($mail);
            $fullName     = json_encode($fullName);
            $title        = json_encode($title);
            $birthdate    = json_encode($birthdate);
            $role         = json_encode($role);
            $experienceAmount = json_encode($experienceAmount);
            $skillAmount = json_encode($skillAmount);

            $str .= "{\"id\":$userId,
                      \"mail\":$mail,
                      \"fullName\":$fullName,
                      \"title\":$title,
                      \"birthdate\":$birthdate,
                      \"role\":$role,
                      \"experienceAmount\":$experienceAmount,
                      \"skillAmount\":$skillAmount},";
        }
        if ($str !== "") {
            $str = substr($str, 0, strlen($str) - 1);
        }
        return "[$str]";
    }
    

    public function check_birthdate_service($startdate, $user){
            
        $res="";
        $query = self::execute("SELECT birthdate from user where ID = :ID", array("ID" => $user->getUserId()));
        $data = $query->fetch();
        $birthdate = $data['birthdate'];
        $birthdate = new DateTime($birthdate);
        $start = new DateTime($startdate);
        //get the year of the startdate
        $start = $start->format("Y");
        //get the year of the birthdate
        $birthdate = $birthdate->format("Y");
        if($start <= $birthdate){
            $res = "false";
        }
        else{
               $res = "true";
        }
        return $res;
     
    }


    public static function get_birthdate_service($user)
    {
        $query = self::execute("SELECT birthdate from user where ID = :ID", array("ID" => $user));
        $result = $query->fetch();
        return json_encode($result['birthdate']);
    }

    /**
     * @param int|null $user_id
     */
    public function setUserId(?int $user_id): void
    {
        $this->user_id = $user_id;
    }

    /**
     * @param string $mail
     */
    public function setMail(string $mail): void
    {
        $this->mail = $mail;
    }

    /**
     * @param string $fullName
     */
    public function setFullName(string $fullName): void
    {
        $this->fullName = $fullName;
    }

    /**
     * @param string $title
     */
    public function setTitle(string $title): void
    {
        $this->title = $title;
    }

    /**
     * @param string $password
     */
    public function setPassword(string $password): void
    {
        $this->password = Tools::my_hash($password);
    }

    /**
     * @param DateTime|null $registeredAt
     */
    public function setRegisteredAt(?DateTime $registeredAt): void
    {
        $this->registeredAt = $registeredAt;
    }

    /**
     * @param DateTime $birthdate
     */
    public function setBirthdate(DateTime $birthdate): void
    {
        $this->birthdate = $birthdate;
    }

    /**
     * @param string $role
     */
    public function setRole(string $role): void
    {
        $this->role = $role;
    }
}
